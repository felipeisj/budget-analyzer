#!/usr/bin/env python3
"""
Script para probar el an√°lisis de m√∫ltiples PDFs del CCI Futrono.
"""

import requests
import json
import time
import os
from pathlib import Path
from typing import Dict, Any
import sys

# Configuraci√≥n
API_BASE_URL = "http://localhost:8000"
PDF_DIRECTORY = "../docs/cci_futrono"  # Ajusta seg√∫n tu estructura
PDF_FILES = ["bases1.pdf", "bases2.pdf", "bases3.pdf"]

def print_separator(title: str = ""):
    """Imprime un separador visual."""
    print("\n" + "="*80)
    if title:
        print(f" {title} ".center(80, "="))
        print("="*80)
    print()

def print_json_pretty(data: Dict[Any, Any], max_depth: int = 3, current_depth: int = 0):
    """Imprime JSON de forma legible con control de profundidad."""
    indent = "  " * current_depth
    
    if isinstance(data, dict):
        for key, value in data.items():
            if current_depth < max_depth:
                if isinstance(value, (dict, list)) and value:
                    print(f"{indent}{key}:")
                    print_json_pretty(value, max_depth, current_depth + 1)
                else:
                    print(f"{indent}{key}: {value}")
            else:
                if isinstance(value, (dict, list)):
                    print(f"{indent}{key}: [{'dict' if isinstance(value, dict) else 'list'} with {len(value)} items]")
                else:
                    print(f"{indent}{key}: {value}")
    
    elif isinstance(data, list):
        if current_depth < max_depth:
            for i, item in enumerate(data[:5]):  # Solo primeros 5 items
                print(f"{indent}[{i}]:")
                print_json_pretty(item, max_depth, current_depth + 1)
            if len(data) > 5:
                print(f"{indent}... y {len(data) - 5} items m√°s")
        else:
            print(f"{indent}[Lista con {len(data)} elementos]")

def upload_multiple_pdfs(pdf_files: list, analysis_depth: str = "full") -> Dict:
    """
    Sube m√∫ltiples PDFs para an√°lisis.
    
    Args:
        pdf_files: Lista de rutas a los archivos PDF
        analysis_depth: Profundidad del an√°lisis
    
    Returns:
        Respuesta del servidor
    """
    url = f"{API_BASE_URL}/api/budget-analysis/pdf/multiple"
    
    # Preparar archivos para upload
    files = []
    for pdf_path in pdf_files:
        if not os.path.exists(pdf_path):
            print(f"‚ùå Error: No se encuentra el archivo {pdf_path}")
            return None
        
        file_size = os.path.getsize(pdf_path) / (1024*1024)  # MB
        print(f"üìÑ {os.path.basename(pdf_path)}: {file_size:.2f}MB")
        
        files.append(('pdfFiles', (os.path.basename(pdf_path), open(pdf_path, 'rb'), 'application/pdf')))
    
    # Datos del form
    data = {
        'analysisDepth': analysis_depth,
        'projectType': 'Conservaci√≥n Camino P√∫blico',
        'projectLocation': 'Futrono, Los R√≠os'
    }
    
    print(f"\nüöÄ Enviando {len(files)} archivos al servidor...")
    print(f"üìä An√°lisis: {analysis_depth}")
    
    try:
        response = requests.post(url, files=files, data=data, timeout=30)
        
        # Cerrar archivos
        for _, file_tuple in files:
            file_tuple[1].close()
        
        if response.status_code == 202:
            result = response.json()
            print(f"‚úÖ An√°lisis iniciado con ID: {result['analysisId']}")
            return result
        else:
            print(f"‚ùå Error {response.status_code}: {response.text}")
            return None
            
    except requests.exceptions.Timeout:
        print("‚è∞ Timeout - El servidor tard√≥ demasiado en responder")
        return None
    except requests.exceptions.ConnectionError:
        print("üîå Error de conexi√≥n - ¬øEst√° el servidor ejecut√°ndose?")
        return None
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")
        return None

def check_analysis_status(analysis_id: str) -> Dict:
    """
    Verifica el estado de un an√°lisis.
    
    Args:
        analysis_id: ID del an√°lisis
    
    Returns:
        Estado actual del an√°lisis
    """
    url = f"{API_BASE_URL}/api/budget-analysis/pdf/{analysis_id}"
    
    try:
        response = requests.get(url, timeout=10)
        
        if response.status_code == 200:
            return {"status": "completed", "data": response.json()}
        elif response.status_code == 202:
            return {"status": "processing", "data": response.json()}
        else:
            return {"status": "error", "data": response.json()}
            
    except Exception as e:
        return {"status": "error", "error": str(e)}

def wait_for_completion(analysis_id: str, max_wait_minutes: int = 10):
    """
    Espera a que se complete el an√°lisis.
    
    Args:
        analysis_id: ID del an√°lisis
        max_wait_minutes: Tiempo m√°ximo a esperar en minutos
    """
    max_attempts = max_wait_minutes * 6  # cada 10 segundos
    attempt = 0
    
    print(f"‚è≥ Esperando finalizaci√≥n del an√°lisis (m√°x {max_wait_minutes} min)...")
    
    while attempt < max_attempts:
        status_result = check_analysis_status(analysis_id)
        
        if status_result["status"] == "completed":
            print("‚úÖ An√°lisis completado!")
            return status_result["data"]
        
        elif status_result["status"] == "processing":
            progress = status_result["data"].get("progress", 0)
            print(f"üîÑ Progreso: {progress}% - {status_result['data'].get('message', 'Procesando...')}")
            
        elif status_result["status"] == "error":
            print(f"‚ùå Error en el an√°lisis: {status_result['data'].get('error', 'Error desconocido')}")
            return None
        
        time.sleep(10)
        attempt += 1
    
    print(f"‚è∞ Timeout - El an√°lisis no se complet√≥ en {max_wait_minutes} minutos")
    return None

def display_analysis_results(result: Dict):
    """Muestra los resultados del an√°lisis de forma organizada."""
    
    print_separator("INFORMACI√ìN GENERAL")
    print(f"üÜî Analysis ID: {result.get('analysisId', 'N/A')}")
    
    # Metadata
    if 'metadata' in result:
        metadata = result['metadata']
        print(f"üìÅ Archivos procesados: {metadata.get('files_processed', 'N/A')}")
        print(f"üìÑ Nombres: {', '.join(metadata.get('file_names', []))}")
        print(f"üíæ Tama√±o total: {metadata.get('total_size_bytes', 0) / (1024*1024):.1f}MB")
        print(f"‚è±Ô∏è Tiempo de procesamiento: {metadata.get('processingTime', 'N/A')}")
        print(f"üéØ Confianza: {metadata.get('confidence_score', 0):.2f}")
    
    # Resumen de archivos
    if 'files_summary' in result:
        summary = result['files_summary']
        print_separator("RESUMEN DE ARCHIVOS")
        print(f"üìä Total archivos: {summary.get('total_files', 0)}")
        print(f"‚úÖ Archivos procesados: {summary.get('files_processed', 0)}")
        print(f"üí∞ Archivos con datos presupuestarios: {summary.get('files_with_budget_data', 0)}")
        print(f"üìÑ Total p√°ginas: {summary.get('total_pages', 0)}")
        print(f"üìã Total tablas: {summary.get('total_tables', 0)}")
        print(f"üî¢ Total items presupuestarios: {summary.get('total_budget_items', 0)}")
    
    # An√°lisis principal
    if 'analysis' in result:
        analysis = result['analysis']
        
        print_separator("RESUMEN EJECUTIVO")
        print(analysis.get('resumen_ejecutivo', 'No disponible'))
        
        # Presupuesto
        if 'presupuesto_estimado' in analysis:
            presupuesto = analysis['presupuesto_estimado']
            print_separator("PRESUPUESTO ESTIMADO")
            print(f"üí∞ Total: ${presupuesto.get('total_clp', 0):,.0f} CLP")
            print(f"üß± Materiales: {presupuesto.get('materials_percentage', 0):.1f}%")
            print(f"üë∑ Mano de obra: {presupuesto.get('labor_percentage', 0):.1f}%")
            print(f"üöú Equipos: {presupuesto.get('equipment_percentage', 0):.1f}%")
            print(f"üìä Gastos generales: {presupuesto.get('overhead_percentage', 0):.1f}%")
        
        # Materiales detallados (primeros 5)
        if 'materiales_detallados' in analysis and analysis['materiales_detallados']:
            print_separator("MATERIALES PRINCIPALES")
            for i, material in enumerate(analysis['materiales_detallados'][:5]):
                print(f"{i+1}. {material.get('descripcion', 'N/A')}")
                print(f"   üí∞ Costo: ${material.get('costo_estimado_clp', 0):,.0f}")
                print(f"   üè™ Proveedor: {material.get('proveedor_sugerido', 'N/A')}")
        
        # Riesgos (primeros 3)
        if 'analisis_riesgos' in analysis and analysis['analisis_riesgos']:
            print_separator("PRINCIPALES RIESGOS")
            for i, riesgo in enumerate(analysis['analisis_riesgos'][:3]):
                print(f"{i+1}. {riesgo.get('descripcion', 'N/A')}")
                print(f"   ‚ö†Ô∏è Probabilidad: {riesgo.get('probabilidad', 'N/A').upper()}")
                print(f"   üí• Impacto: {riesgo.get('impacto', 'N/A').upper()}")
                print(f"   üõ°Ô∏è Mitigaci√≥n: {riesgo.get('medida_mitigacion', 'N/A')}")
        
        # Recomendaciones (primeras 3)
        if 'recomendaciones' in analysis and analysis['recomendaciones']:
            print_separator("PRINCIPALES RECOMENDACIONES")
            for i, rec in enumerate(analysis['recomendaciones'][:3]):
                print(f"{i+1}. {rec.get('recomendacion', 'N/A')}")
                print(f"   üéØ Categor√≠a: {rec.get('categoria', 'N/A')}")
                print(f"   üî• Prioridad: {rec.get('prioridad', 'N/A').upper()}")
                print(f"   üìã Justificaci√≥n: {rec.get('justificacion', 'N/A')}")

def save_full_results(result: Dict, filename: str = "analysis_results.json"):
    """Guarda los resultados completos en un archivo JSON."""
    try:
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(result, f, ensure_ascii=False, indent=2)
        print(f"üíæ Resultados completos guardados en: {filename}")
    except Exception as e:
        print(f"‚ùå Error guardando archivo: {e}")

def main():
    """Funci√≥n principal del script."""
    print_separator("ANALIZADOR DE M√öLTIPLES PDFs MOP")
    print("üéØ Proyecto: CCI Futrono y Lago Ranco")
    
    # Verificar que el servidor est√© ejecut√°ndose
    try:
        response = requests.get(f"{API_BASE_URL}/health", timeout=5)
        if response.status_code != 200:
            print("‚ùå El servidor no est√° respondiendo correctamente")
            return
        print("‚úÖ Servidor conectado y funcionando")
    except:
        print("‚ùå No se puede conectar al servidor. ¬øEst√° ejecut√°ndose en localhost:8000?")
        return
    
    # Construir rutas completas de los archivos
    pdf_paths = []
    for filename in PDF_FILES:
        full_path = os.path.join(PDF_DIRECTORY, filename)
        if os.path.exists(full_path):
            pdf_paths.append(full_path)
        else:
            print(f"‚ùå No se encuentra: {full_path}")
            return
    
    print(f"üìÅ Directorio: {PDF_DIRECTORY}")
    print(f"üìÑ Archivos encontrados: {len(pdf_paths)}")
    
    # Subir archivos
    upload_result = upload_multiple_pdfs(pdf_paths, "full")
    if not upload_result:
        return
    
    analysis_id = upload_result['analysisId']
    
    # Esperar y obtener resultados
    final_result = wait_for_completion(analysis_id, max_wait_minutes=10)
    if not final_result:
        print("‚ùå No se pudieron obtener los resultados")
        return
    
    # Mostrar resultados
    display_analysis_results(final_result)
    
    # Guardar resultados completos
    save_full_results(final_result, f"cci_futrono_analysis_{analysis_id[:8]}.json")
    
    print_separator("AN√ÅLISIS COMPLETADO")
    print("üéâ ¬°An√°lisis finalizado exitosamente!")
    print(f"üìã ID del an√°lisis: {analysis_id}")

if __name__ == "__main__":
    main()